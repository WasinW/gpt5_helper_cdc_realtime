diff --git a/framework/src/main/scala/com/analytics/framework/modules/quality/QualityRules.scala b/framework/src/main/scala/com/analytics/framework/modules/quality/QualityRules.scala
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/framework/src/main/scala/com/analytics/framework/modules/quality/QualityRules.scala
@@
+package com.analytics.framework.modules.quality
+
+import com.analytics.framework.modules.quality.RulesLoader.Rule
+
+/**
+ * Encapsulates different sets of data quality rules.
+ *
+ * Use this class to wrap one or more lists of rules.  The `notNull`
+ * property accepts a list of rules generated by `RulesLoader`. Additional rule
+ * types can be added here later (e.g. regex checks).
+ *
+ * @param notNull optional list of not-null rules to enforce
+ */
+case class QualityRules(
+  notNull: Option[List[Rule[Map[String, Any]]]] = None
+) {
+  /** Flatten all provided rules into a single list. */
+  def all: List[Rule[Map[String, Any]]] = notNull.getOrElse(Nil)
+}
diff --git a/framework/src/main/scala/com/analytics/framework/pipeline/stages/QualityStage.scala b/framework/src/main/scala/com/analytics/framework/pipeline/stages/QualityStage.scala
index 7c3f403..bf1739b 100644
--- a/framework/src/main/scala/com/analytics/framework/pipeline/stages/QualityStage.scala
+++ b/framework/src/main/scala/com/analytics/framework/pipeline/stages/QualityStage.scala
@@
-class QualityStage[T](rules: List[Rule[T]], audit: String => Unit) extends BaseStage[T, T] {
+class QualityStage[T](rules: List[Rule[T]], audit: String => Unit) extends BaseStage[T, T] {
@@
   override def run(ctx: PipelineCtx, in: Seq[T]): Seq[T] = {
@@
   }
+
+  /**
+   * Auxiliary constructor that accepts a QualityRules instance.
+   *
+   * This makes it convenient to pass a QualityRules wrapper directly when
+   * constructing a QualityStage.  The underlying list of rules is
+   * extracted and used to configure the stage.
+   *
+   * @param qr   QualityRules wrapper
+   * @param audit function to record rule failures
+   */
+  def this(qr: com.analytics.framework.modules.quality.QualityRules, audit: String => Unit) =
+    this(qr.all.asInstanceOf[List[Rule[T]]], audit)
 }
diff --git a/framework/src/main/scala/com/analytics/framework/app/CommonRunner.scala b/framework/src/main/scala/com/analytics/framework/app/CommonRunner.scala
index 49bbdd3..24d7a55 100644
--- a/framework/src/main/scala/com/analytics/framework/app/CommonRunner.scala
+++ b/framework/src/main/scala/com/analytics/framework/app/CommonRunner.scala
@@
-import com.analytics.framework.modules.quality.RulesLoader
+import com.analytics.framework.modules.quality.{RulesLoader, QualityRules}
@@
-        val _qualityLink =
-          new QualityStage[Map[String,Any]](
-            QualityRules(notNull = Some(RulesLoader.loadNotNullRules("business-domains/member/resources/quality_rules.yaml"))),
-            audit("data_quality_log","raw")
-          )
+        val _qualityLink =
+          new QualityStage[Map[String,Any]](
+            QualityRules(notNull = Some(RulesLoader.loadNotNullRules("business-domains/member/resources/quality_rules.yaml"))),
+            audit("data_quality_log","raw")
+          )
